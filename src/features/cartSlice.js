import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import placeOrder from "../api/placeOrder";
import axios from "axios";

const initialState = {
  cartItems: [],
  status: "idle",
  error: null,
};

const cartSlice = createSlice({
  name: "cart",
  initialState,
  reducers: {
    addItem: (state, action) => {
      const itemIsInCart = state.cartItems.find(
        (item) => item.itemId === action.payload.itemId
      );
      if (itemIsInCart) {
        console.error("trying to add duplicate item to the cart");
        return;
      }

      const obj = {
        itemId: action.payload.itemId,
        quantity: action.payload.quantity,
      };
      state.cartItems.push(obj);
    },

    removeItem: (state, action) => {
      const filteredItems = state.cartItems.filter(
        (item) => item.itemId !== action.payload.itemId
      );
      state.cartItems = filteredItems;
    },

    asyncRemoveItem: async (state, action) => {
      const filteredItems = state.cartItems.filter(
        (item) => item.itemId !== action.payload.itemId
      );
      state.cartItems = filteredItems;
    },

    setAmount: (state, action) => {
      const itemInCart = state.cartItems.find(
        (item) => item.itemId === action.payload.itemId
      );
      if (!itemInCart) {
        console.error("trying to set amount of non-existent item in the cart");
        return;
      }

      itemInCart.quantity = action.payload.quantity;
    },

    clearCart: (state) => {
      state.cartItems = [];
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // Handle the action types defined by the `incrementAsync` thunk defined below.
      // This lets the slice reducer update the state with request status and results.
      // .addCase(placeOrderAsync.fulfilled, (state, action) => {
      //   console.log("placeOrderAsync.fulfilled", state);
      //   state.cartItems = [];
      // });

      .addCase(placeOrderAsync.pending, (state) => {
        state.status = "loading";
        state.error = null;
      })
      .addCase(placeOrderAsync.fulfilled, (state) => {
        state.status = "succeeded";
        state.items = []; // Clear cart on successful order placement
      })
      .addCase(placeOrderAsync.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.payload; // Save the error
      });
  },
});

export const placeOrderAsync = createAsyncThunk(
  "cart/placeOrder",
  async (cartItems, { rejectWithValue, getState }) => {
    try {
      const payload = {
        totalPrice: 0,
        orderItems: cartItems,
      };
      console.log(payload);
      const response = await axios.post(
        "https://localhost:7048/api/Order",
        payload,
        {
          headers: {
            "Content-Type": "application/json",
          },
          withCredentials: true, 
        }
      );
      return response.data;
    } catch (error) {
      console.error("Failed to place order", error);
      return rejectWithValue(error.response?.data || error.message);
    }
  }
);

export const selectCartItems = (state) => state.cart.cartItems;
export const selectStatus = (state) => state.counter.status;

export const { addItem, removeItem, setAmount, clearCart } = cartSlice.actions;

export default cartSlice.reducer;
